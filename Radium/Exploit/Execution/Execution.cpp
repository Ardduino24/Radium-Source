#include "Execution.hpp"
#include <Luau/Compiler.h>
#include "../../Dependencies/Luau/VM/src/lobject.h"
#include "../../Dependencies/Luau/VM/src/lstate.h"
#include "../../Dependencies/Luau/VM/src/lapi.h"
#include "../../Dependencies/Luau/VM/src/lgc.h"
#include <queue>
#include "../Roblox/Security/Security.hpp"
#include "../Envionment/Environment.hpp"
#include <lualib.h>
#include <fstream>
#include <sstream>

std::uintptr_t OriginalWhsjFunc = 0;

std::queue<std::string> ScriptQueue{};

static uintptr_t MaxCapabilities = 0x200000000000003FLL | 0x3FFFFFF00LL;

void Radium::Execution::Init()
{
	L = reinterpret_cast<lua_State*>(TaskScheduler::GetLuaState());
	HookWhsj();
}

void Execute(lua_State* L, std::string Script)
{
	auto L2 = lua_newthread(L);

	auto Compiled = Luau::compile(Script, {}, {});

	auto ExtraSpace = reinterpret_cast<std::uintptr_t>(L2->userdata);

	Radium::Security::SetIdentity(L2, 8);
	Radium::Security::SetThreadCapabilities(L2, MaxCapabilities);

	luaL_sandboxthread(L2);

	Radium::Environment::Register(L2);

    auto Result = luau_load(L2, oxorany("@Radium"), Compiled.c_str(), Compiled.size(), 0);

	if (Result) // An error occured while loading the script in the VM
	{
		lua_getglobal(L2, oxorany("warn"));
		lua_pushstring(L2, lua_tostring(L2, -1));
		lua_call(L2, 1, 0);
	}
	else
	{
		Radium::Security::SetProtoCapabilities(L2, lua_toclosure(L2, -1)->l.p, &MaxCapabilities);
		Radium::Roblox::TaskDefer(L2);
	}

//	Radium::Roblox::TaskDefer(L2);
}
 
int WhsjHook(std::uintptr_t Self, int a2) // This is where we will register the script(s) on the scheduler
{
	if (!ScriptQueue.empty())
	{
		std::string Script = ScriptQueue.front();
		ScriptQueue.pop();

		Execute(reinterpret_cast<lua_State*>(Radium::TaskScheduler::GetLuaState()), Script);
	}
	return reinterpret_cast<int(__fastcall*)(std::uintptr_t, int)>(OriginalWhsjFunc)(Self, a2);
}

std::uintptr_t NewVfTable[7];

void Radium::Execution::HookWhsj()
{
	auto Job = TaskScheduler::GetJobByName(oxorany("LuaGc"));

	std::uintptr_t OriginalFunction = 0;

	memcpy(NewVfTable, *reinterpret_cast<void**>(Job), sizeof(std::uintptr_t) * 7);

	OriginalWhsjFunc = NewVfTable[6];

	NewVfTable[6] = reinterpret_cast<std::uintptr_t>(WhsjHook);

	*reinterpret_cast<std::uintptr_t**>(Job) = NewVfTable;

//	MessageBoxA(NULL, std::to_string(TaskScheduler::GetJobByName("RenderJob")).c_str(), 0, 0);
}

void Radium::Execution::Execute(std::string Script)
{
	Luau::CompileOptions Options{ 2,1,2 };
	ScriptQueue.push(Script	);
}