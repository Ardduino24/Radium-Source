#pragma once
#include <lua.h>
#include "imgui_impl_dx11.h"
#include "imgui_impl_win32.h"
#include <vector>

struct BaseDrawing
{
	bool Visible{true};
	ImVec4 Color{};
	float Transparency{};
	int Type{};
	int ZIndex{};
};


struct Color_t
{
	float R, G, B;

	operator ImVec4() { return { R, G, B, 1.f }; }

	operator ImVec4() const { return { R, G, B, 1.f }; }
};


struct Text_t : BaseDrawing
{
	char Data[512];	

	ImVec2 Position;

	float Transparency = 1.f;
	bool Centered{ false };
	bool Outline{false};

	float Size{ 0 };

	int Font = 0;

	ImVec2 TextBounds = { 0.f, 16.f };
};

struct Line_t : BaseDrawing
{
	ImVec2 From;
	ImVec2 To;
	float Thickness;
};

struct Circle_t : BaseDrawing
{
	int NumSides;
	float Radius;
	ImVec2 Position;
	float thickness;
	bool Filled;
};

struct Square_t : BaseDrawing
{
	ImVec2 Position;
	bool Filled;
	float Thickness;
	ImVec2 Size;
};

struct Quad_t : BaseDrawing
{
	ImVec2 PointA;
	ImVec2 PointB;
	ImVec2 PointC;
	ImVec2 PointD;
	bool Filled;
	float Thickness;
};


namespace Radium
{
	namespace Drawing
	{
		inline std::vector<Circle_t*> RenderingCircles{};
		inline std::vector<Line_t*> RenderingLines{};
		inline std::vector<Text_t*> RenderingText{};
		inline std::vector<Square_t*> RenderingSquare{};
		inline std::vector<Quad_t*> RenderingQuads{};

		void Register(lua_State* L);
	}
}