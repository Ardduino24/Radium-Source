#include "Rendering.hpp"
#include <thread>
#include <d3d11.h>
#include <d3dx11.h>
#include "imgui.h"
#include "imgui_impl_dx11.h"
#include "imgui_impl_win32.h"
#include "../../Dependencies/VfTable/VfTable.h"
#include "../Roblox/TaskScheduler/TaskScheduler.hpp"
#include <string>
#include <iostream>
#include <d3dx11.h>
#include <d3d11.h>
#include "imgui_impl_dx11.h"
#include "imgui_impl_win32.h"
#include "Drawing.h"
#include "custom_fonts.h"
#include "TextEditor.hpp"
#include "../Execution/Execution.hpp"

HWND Window = nullptr;
ID3D11DeviceContext* FakeDeviceContext{};
ID3D11Device* FakeDevice{};
ID3D11RenderTargetView* RenderTargetView{};
WNDPROC OriginalWndProc = nullptr; 
DXGI_SWAP_CHAIN_DESC SwapchainDesc;

LONG Width;
LONG Height;

bool Init = false;

bool ShowInternalUI = false;

extern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

LRESULT CALLBACK WndProc(HWND Hwnd, UINT Msg, WPARAM WParam, LPARAM LParam) {

    if (GetAsyncKeyState(VK_INSERT) & 1)
    {
        ShowInternalUI = !ShowInternalUI;
    }
    
    if (ShowInternalUI)
    {
        if (Msg == WM_CLOSE)
        {
            DestroyWindow(Hwnd);
        }
        ImGui_ImplWin32_WndProcHandler(Hwnd, Msg, WParam, LParam);
       
        return 1;
    }

    return CallWindowProc(OriginalWndProc, Hwnd, Msg, WParam, LParam);
}



namespace FontMapper
{
    std::vector<ImFont*> font;

    auto push_font(ImFont* idx) -> void { font.emplace_back(idx); }
    auto return_font(int idx) -> ImFont* { 
        return font.at(idx); }
}

ID3D11Texture2D* BackBuffer;

TextEditor Editor{};

HRESULT __stdcall hkPresent(IDXGISwapChain* SwapChain, UINT SyncInterval, UINT Flags)
{

    if (!Init)
    {
        if (SUCCEEDED(SwapChain->GetDevice(__uuidof(ID3D11Device), (void**)&FakeDevice)))
        {
            FakeDevice->GetImmediateContext(&FakeDeviceContext);
            SwapChain->GetDesc(&SwapchainDesc);
            Window = SwapchainDesc.OutputWindow;
            OriginalWndProc = (WNDPROC)SetWindowLongPtr(Window, GWLP_WNDPROC, (LONG_PTR)WndProc);

            ImGui::CreateContext();
            ImGuiIO& IO = ImGui::GetIO();
            IO.ConfigFlags = ImGuiConfigFlags_NoMouseCursorChange;
            ImGui_ImplWin32_Init(Window);
            ImGui_ImplDX11_Init(FakeDevice, FakeDeviceContext);
            ImGui_ImplDX11_CreateDeviceObjects();

            Init = true;
        }
    }

    if (!RenderTargetView)
    {
        SwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&BackBuffer);
        FakeDevice->CreateRenderTargetView(BackBuffer, NULL, &RenderTargetView);
        BackBuffer->Release();
    }

    // Start new frame
    ImGui_ImplDX11_NewFrame();
    ImGui_ImplWin32_NewFrame();
    ImGui::NewFrame();

    if (ShowInternalUI == true)
    {
        ImVec4* colors = ImGui::GetStyle().Colors;
        colors[ImGuiCol_Text] = ImVec4(0.84f, 0.84f, 0.84f, 1.00f);
        colors[ImGuiCol_TextDisabled] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
        colors[ImGuiCol_WindowBg] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
        colors[ImGuiCol_ChildBg] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
        colors[ImGuiCol_PopupBg] = ImVec4(0.09f, 0.09f, 0.09f, 1.00f);
        colors[ImGuiCol_Border] = ImVec4(0.17f, 0.17f, 0.17f, 1.00f);
        colors[ImGuiCol_BorderShadow] = ImVec4(0.10f, 0.10f, 0.10f, 0.00f);
        colors[ImGuiCol_FrameBg] = ImVec4(0.33f, 0.33f, 0.33f, 1.00f);
        colors[ImGuiCol_FrameBgHovered] = ImVec4(0.47f, 0.47f, 0.47f, 1.00f);
        colors[ImGuiCol_FrameBgActive] = ImVec4(0.16f, 0.16f, 0.16f, 1.00f);
        colors[ImGuiCol_TitleBg] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
        colors[ImGuiCol_TitleBgActive] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
        colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.19f, 0.19f, 0.19f, 1.00f);
        colors[ImGuiCol_MenuBarBg] = ImVec4(0.11f, 0.11f, 0.11f, 1.00f);
        colors[ImGuiCol_ScrollbarBg] = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);
        colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.33f, 0.33f, 0.33f, 1.00f);
        colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.33f, 0.33f, 0.33f, 1.00f);
        colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.35f, 0.35f, 0.35f, 1.00f);
        colors[ImGuiCol_CheckMark] = ImVec4(0.48f, 0.48f, 0.48f, 1.00f);
        colors[ImGuiCol_SliderGrab] = ImVec4(0.44f, 0.44f, 0.44f, 1.00f);
        colors[ImGuiCol_SliderGrabActive] = ImVec4(0.44f, 0.44f, 0.44f, 1.00f);
        colors[ImGuiCol_Button] = ImVec4(0.25f, 0.25f, 0.25f, 1.00f);
        colors[ImGuiCol_ButtonHovered] = ImVec4(0.25f, 0.25f, 0.25f, 1.00f);
        colors[ImGuiCol_ButtonActive] = ImVec4(0.25f, 0.25f, 0.25f, 1.00f);
        colors[ImGuiCol_Header] = ImVec4(0.27f, 0.27f, 0.27f, 1.00f);
        colors[ImGuiCol_HeaderHovered] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_HeaderActive] = ImVec4(0.27f, 0.27f, 0.27f, 1.00f);
        colors[ImGuiCol_Separator] = ImVec4(0.18f, 0.18f, 0.18f, 1.00f);
        colors[ImGuiCol_SeparatorHovered] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_SeparatorActive] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_ResizeGrip] = ImVec4(0.54f, 0.54f, 0.54f, 1.00f);
        colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_ResizeGripActive] = ImVec4(0.19f, 0.39f, 0.69f, 1.00f);
        colors[ImGuiCol_Tab] = ImVec4(0.26f, 0.26f, 0.26f, 1.00f);
        colors[ImGuiCol_TabHovered] = ImVec4(0.26f, 0.26f, 0.26f, 1.00f);
        colors[ImGuiCol_TabActive] = ImVec4(0.33f, 0.33f, 0.33f, 1.00f);
        colors[ImGuiCol_TabUnfocused] = ImVec4(0.07f, 0.10f, 0.15f, 0.97f);
        colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.14f, 0.26f, 0.42f, 1.00f);
        colors[ImGuiCol_PlotLines] = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);
        colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
        colors[ImGuiCol_PlotHistogram] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_PlotHistogramHovered] = ImVec4(0.20f, 0.39f, 0.69f, 1.00f);
        colors[ImGuiCol_TableHeaderBg] = ImVec4(0.19f, 0.19f, 0.20f, 1.00f);
        colors[ImGuiCol_TableBorderStrong] = ImVec4(0.31f, 0.31f, 0.35f, 1.00f);
        colors[ImGuiCol_TableBorderLight] = ImVec4(0.23f, 0.23f, 0.25f, 1.00f);
        colors[ImGuiCol_TableRowBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
        colors[ImGuiCol_TableRowBgAlt] = ImVec4(1.00f, 1.00f, 1.00f, 0.06f);
        colors[ImGuiCol_TextSelectedBg] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_DragDropTarget] = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);
        colors[ImGuiCol_NavHighlight] = ImVec4(0.28f, 0.45f, 0.70f, 1.00f);
        colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
        colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);
        colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);





        ImGui::GetStyle().FramePadding = ImVec2(3, 6);
        ImGui::GetStyle().WindowTitleAlign = ImVec2(0.50, 0.50);
        ImGui::GetStyle().FrameRounding = 3;
        ImGui::GetStyle().FrameBorderSize = 0;
        ImGui::GetStyle().WindowRounding = 5;


        ImGui::GetIO().ConfigFlags = 0;
        static bool window = true;
        ImGui::SetNextWindowSize(ImVec2(538, 375));
            
        if (ImGui::Begin("Radium", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize))
        {
            Editor.SetLanguageDefinition(TextEditor::LanguageDefinition::Lua());
            ImGui::SetCursorPos(ImVec2(8.5, 60));
            Editor.Render("Editor", ImVec2(521,306), NULL);
            Editor.SetPalette(TextEditor::GetDarkPalette());
            ImGui::SetCursorPos(ImVec2(8.5, 29.5));
            if (ImGui::Button("Execute", ImVec2(59, 26)))
            {
                std::string Text = Editor.GetText();
                Radium::Execution::Execute(Text);
            }

            ImGui::SetCursorPos(ImVec2(73.5, 29.5));
            if (ImGui::Button("Clear", ImVec2(47, 26)))
            {
                Editor.SetText("");
            }

        }

        ImGui::End();
    }
    else
    {

        ImGui::GetIO().ConfigFlags = ImGuiConfigFlags_NoMouseCursorChange;
        const auto DrawList = ImGui::GetBackgroundDrawList();

        for (const auto& LineObject : Radium::Drawing::RenderingLines)
        {
            if (LineObject->Visible)
            {
                DrawList->AddLine({ LineObject->From.x, LineObject->From.y },
                    { LineObject->To.x, LineObject->To.y },
                    ImColor(ImVec4(LineObject->Color.x, LineObject->Color.y, LineObject->Color.z, LineObject->Transparency)),
                    static_cast<float>(LineObject->Thickness));
            }
        }

        for (const auto& CircleObject : Radium::Drawing::RenderingCircles)
        {

            if (CircleObject->Visible)
            {
                if (CircleObject->Filled)
                {
                    DrawList->AddCircleFilled(CircleObject->Position, CircleObject->Radius,
                        ImColor(ImVec4(CircleObject->Color.x, CircleObject->Color.y, CircleObject->Color.z, CircleObject->Transparency)));
                }
                else
                {
                    DrawList->AddCircle(CircleObject->Position, CircleObject->Radius,
                        ImColor(ImVec4(CircleObject->Color.x, CircleObject->Color.y, CircleObject->Color.z, CircleObject->Transparency)));
                }
            }
        }

        for (const auto& TextObject : Radium::Drawing::RenderingText)
        {

            auto size = 0;
            const auto TextSize = ImGui::CalcTextSize(TextObject->Data, nullptr, true);

            if (TextObject->Visible)
            {
                if (TextObject->Centered)
                {
                    if (TextObject->Outline)
                    {
                        DrawList->AddText(ImVec2(TextObject->Position.x - TextSize.x / 2.0f + 1, TextObject->Position.y + TextSize.y * size + 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x - TextSize.x / 2.0f - 1, TextObject->Position.y + TextSize.y * size - 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x - TextSize.x / 2.0f + 1, TextObject->Position.y + TextSize.y * size - 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x - TextSize.x / 2.0f - 1, TextObject->Position.y + TextSize.y * size + 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                    }
                    DrawList->AddText(ImVec2(TextObject->Position.x - TextSize.x / 2.0f, TextObject->Position.y), ImColor(TextObject->Color.x, TextObject->Color.y, TextObject->Color.z, TextObject->Transparency), TextObject->Data);
                }

                else
                {
                    if (TextObject->Outline)
                    {
                        DrawList->AddText(ImVec2(TextObject->Position.x / 1.1f + 16, TextObject->Position.y + 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x / 1.1f + 14, TextObject->Position.y - 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x / 1.1f + 16, TextObject->Position.y - 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                        DrawList->AddText(ImVec2(TextObject->Position.x / 1.1f + 14, TextObject->Position.y + 1), ImColor(ImVec4(0, 0, 0, TextObject->Transparency)), TextObject->Data);
                    }
                    DrawList->AddText(ImVec2(TextObject->Position.x / 1.1f + 15, TextObject->Position.y), ImColor(TextObject->Color.x, TextObject->Color.y, TextObject->Color.z, TextObject->Transparency), TextObject->Data);
                    size++;
                }
            }
        }

        for (const auto& SquareObject : Radium::Drawing::RenderingSquare)
        {

            if (SquareObject->Visible)
            {
                if (SquareObject->Filled)
                    DrawList->AddRectFilled({ SquareObject->Position.x, SquareObject->Position.y }, { SquareObject->Position.x + SquareObject->Size.x, SquareObject->Position.y + SquareObject->Size.y }, ImColor(ImVec4(SquareObject->Color.x, SquareObject->Color.y, SquareObject->Color.z, SquareObject->Transparency)));
                else
                    DrawList->AddRect({ SquareObject->Position.x, SquareObject->Position.y }, { SquareObject->Position.x + SquareObject->Size.x, SquareObject->Position.y + SquareObject->Size.y }, 0, 0, 0, (float)SquareObject->Thickness);
            }
        }

        for (const auto& QuadObject : Radium::Drawing::RenderingQuads)
        {
            if (QuadObject->Visible)
            {
                if (QuadObject->Filled)
                {
                    DrawList->AddQuadFilled({ QuadObject->PointA.x, QuadObject->PointA.y }, { QuadObject->PointB.x, QuadObject->PointB.y }, { QuadObject->PointC.x, QuadObject->PointC.y }, { QuadObject->PointD.x, QuadObject->PointD.y }, ImColor(ImVec4(QuadObject->Color.x, QuadObject->Color.y, QuadObject->Color.z, QuadObject->Transparency)));
                }
                else if (QuadObject->Filled)
                {
                    DrawList->AddQuad({ QuadObject->PointA.x, QuadObject->PointA.y }, { QuadObject->PointB.x, QuadObject->PointB.y }, { QuadObject->PointC.x, QuadObject->PointC.y }, { QuadObject->PointD.x, QuadObject->PointD.y }, ImColor(ImVec4(QuadObject->Color.x, QuadObject->Color.y, QuadObject->Color.z, QuadObject->Transparency)));
                }
            }
        }
    }

    ImGui::EndFrame();
    ImGui::Render();

    FakeDeviceContext->OMSetRenderTargets(1, &RenderTargetView, NULL);
    ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());

    return reinterpret_cast<HRESULT(__stdcall*)(IDXGISwapChain*, UINT, UINT)>(Radium::Rendering::PresentAddr)(SwapChain, SyncInterval, Flags);
}

int WindowWidth = 0;
int WindowHeight = 0;

RECT WindowSize{};

HRESULT __stdcall ResizeBuffersHook(IDXGISwapChain* SwapChain, UINT BufferCount, UINT Width, UINT Height, DXGI_FORMAT Fmt, UINT Flags)
{
    // Release the existing render target view
    if (RenderTargetView)
    {
        RenderTargetView->Release();
        RenderTargetView = nullptr;
    }

    // Call the original ResizeBuffers function
    HRESULT hr = reinterpret_cast<HRESULT(__stdcall*)(IDXGISwapChain*, UINT, UINT, UINT, DXGI_FORMAT, UINT)>(Radium::Rendering::ResizeBuffersAddr)(SwapChain, BufferCount, Width, Height, Fmt, Flags);

    if (FAILED(hr))
        return hr;

    // Update Swapchain Description
    SwapChain->GetDesc(&SwapchainDesc);

    // Retrieve the new back buffer and recreate the render target view
    ID3D11Texture2D* BackBuffer = nullptr;
    if (SUCCEEDED(SwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&BackBuffer)))
    {
        FakeDevice->CreateRenderTargetView(BackBuffer, NULL, &RenderTargetView);
        BackBuffer->Release();
    }

    // Update the window size
    GetClientRect(SwapchainDesc.OutputWindow, &WindowSize);
    WindowWidth = WindowSize.right - WindowSize.left;
    WindowHeight = WindowSize.bottom - WindowSize.top;

    // Update ImGui display size
    ImGuiIO& io = ImGui::GetIO();
    io.DisplaySize = ImVec2((float)WindowWidth, (float)WindowHeight);

    return hr;
}


// Start rendering

void Radium::Rendering::Hook() {
    auto RenderJob = TaskScheduler::GetJobByName("RenderJob");

    auto RenderView = *reinterpret_cast<uintptr_t*>(RenderJob + Offsets::Render::RenderView);

    auto DeviceD3D11 = *reinterpret_cast<uintptr_t*>(RenderView + Offsets::Render::DeviceD3D11);

    auto SwapChain = *reinterpret_cast<uintptr_t*>(DeviceD3D11 + Offsets::Render::SwapChain);

    PresentAddr = vtablehook_hook((void*)SwapChain, &hkPresent, 8);
    ResizeBuffersAddr = vtablehook_hook((void*)SwapChain, &ResizeBuffersHook, 13);
}
