#include "Security.hpp"

void Radium::Security::SetProtoCapabilities(lua_State* L, Proto* LClosure, std::uintptr_t* Capabilities)
{
	LClosure->userdata = Capabilities;

	for (int I = 0; I < LClosure->sizep; I++)
	{
		SetProtoCapabilities(L, LClosure->p[I], Capabilities);
	}
}

void Radium::Security::SetThreadCapabilities(lua_State* L, std::uintptr_t Capabilities)
{
	auto ExtraSpace = reinterpret_cast<std::uintptr_t>(L->userdata);

	*reinterpret_cast<uintptr_t*>(ExtraSpace + 72) = Capabilities; // Unlike proto capabilities, this doesn't require a pointer.
}

void Radium::Security::SetIdentity(lua_State* L, int Identity)
{
	auto ExtraSpace = reinterpret_cast<std::uintptr_t>(L->userdata);

	*reinterpret_cast<uintptr_t*>(ExtraSpace + 48) = Identity;
}

int Radium::Security::GetIdentity(lua_State* L)
{
	auto ExtraSpace = reinterpret_cast<std::uintptr_t>(L->userdata);

	return *reinterpret_cast<uintptr_t*>(ExtraSpace + 48);
}